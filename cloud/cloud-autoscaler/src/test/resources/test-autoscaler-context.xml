<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	
	xsi:schemaLocation="
		http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
		http://www.springframework.org/schema/jdbc
		http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-3.0.xsd">
    
	<context:property-placeholder location="
	    classpath:system.properties,
	    classpath:infrastructure.properties,
	    classpath:healthmonitoring.properties,
	    classpath:autoscaler.properties" />
	    
	<import resource="classpath*:/META-INF/spring/cloud-context-util.xml" />
	<import resource="classpath*:/META-INF/spring/cloud-context-core.xml" />
	<import resource="classpath*:/META-INF/spring/cloud-context-repository.xml" />
	<import resource="classpath*:/META-INF/spring/cloud-context-service.xml" />
	
    <context:component-scan base-package="org.openinfinity.cloud.autoscaler.periodicscaler"/>
	<context:component-scan base-package="org.openinfinity.cloud.autoscaler.scheduledscaler"/>
			
	<jdbc:embedded-database id="cloudDataSource">
        <jdbc:script location="classpath*:*openinfinity-schema.sql"/>
        <jdbc:script location="classpath:/org/springframework/batch/core/schema-hsqldb.sql"/>
    </jdbc:embedded-database>
     
    <bean class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg ref="cloudDataSource" />
    </bean>
      
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="cloudDataSource" />
	</bean> 
		
	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean"
		p:dataSource-ref="cloudDataSource" p:transactionManager-ref="txManager" />
	
	<bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>
		
	<bean id="autoscalerItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="assertUpdates" value="true" />
		<property name="itemSqlParameterSourceProvider">
			<bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
		<property name="dataSource" ref="cloudDataSource" />
		<property name="sql" value="insert into job_tbl (job_type, job_status, job_instance_id, job_services, job_cloud, job_zone)  
		    values (:jobType, :jobStatus, :instanceId, :services, :cloud, :zone)" />
	</bean>
	
	<batch:job id="periodicJob">
		<batch:step id="stepP1">
			<batch:tasklet transaction-manager="txManager"
				start-limit="3">
				<batch:chunk reader="periodicScalerItemReader" processor="periodicScalerItemProcessor"
					writer="autoscalerItemWriter" commit-interval="100" retry-limit="3">
					<batch:retryable-exception-classes>
                    	<batch:include class="org.springframework.dao.OptimisticLockingFailureException" />
                        <batch:include class="org.springframework.dao.DeadlockLoserDataAccessException" />
                    </batch:retryable-exception-classes>
                </batch:chunk>
			</batch:tasklet>
		</batch:step>	
	</batch:job>
	
	<batch:job id="scheduledJob">
		<batch:step id="scheduledJobStep1">
			<batch:tasklet transaction-manager="txManager"
				start-limit="2">
				<batch:chunk reader="scheduledScalerItemReader" processor="scheduledScalerItemProcessor"
					writer="autoscalerItemWriter" commit-interval="1" />
			</batch:tasklet>
		</batch:step>
	</batch:job>
		
	<bean id="periodicScalerItemReader" class="org.springframework.batch.item.database.JdbcCursorItemReader">
		<property name="dataSource" ref="cloudDataSource"/>
        <property name="sql" value="select * from machine_tbl where machine_type = 'loadbalancer'"/>
		<property name="rowMapper">
			<bean id="machineRowMapper" class="org.openinfinity.cloud.domain.repository.administrator.MachineRowMapper"/>
		</property>	
	</bean>
	
	<bean id="scheduledScalerItemReader" class="org.springframework.batch.item.database.JdbcCursorItemReader">
		<property name="dataSource" ref="cloudDataSource"/>
		<property name="sql" value="select * from scaling_rule_tbl where scheduled = 1"/>
		<property name="rowMapper">
			<bean id="scalingRuleRowMapper" class="org.openinfinity.cloud.domain.repository.scaling.ScalingRuleRowMapper"/>
		</property>
	</bean>	
	    
    <task:scheduled-tasks scheduler="autoscalerScheduler">
        <task:scheduled ref="periodicScalerLauncher" method="launch" cron="*/10 * * * * ?"/>
        <task:scheduled ref="scheduledScalerLauncher" method="launch" cron="*/1 * * * * *"/>
    </task:scheduled-tasks>
    <task:scheduler id="autoscalerScheduler" pool-size="1"/>   
	
</beans>