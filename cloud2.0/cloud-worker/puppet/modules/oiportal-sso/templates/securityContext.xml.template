<?xml version="1.0" encoding="UTF-8" ?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:hz="http://www.hazelcast.com/schema/spring"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.hazelcast.com/schema/spring
           http://www.hazelcast.com/schema/spring/hazelcast-spring-2.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.1.xsd">

    <beans:bean
            class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <beans:property name="locations"
                        value="classpath:org.openinfinity.security.properties"/>
    </beans:bean>

    <context:annotation-config/>
    <context:component-scan
            base-package="org.openinfinity.security.spring"/>

    <beans:bean name="samlProcessing"
                class="org.openinfinity.security.spring.catalina.AntPathValveRequestMatcher">
        <beans:constructor-arg><beans:value>/saml/web/**</beans:value></beans:constructor-arg>
    </beans:bean>

    <beans:bean name="logout"
                class="org.openinfinity.security.spring.catalina.AntPathValveRequestMatcher">
        <beans:constructor-arg><beans:value>/logout.jsp</beans:value></beans:constructor-arg>
    </beans:bean>

    <beans:bean name="login"
                class="org.openinfinity.security.spring.catalina.AntPathValveRequestMatcher">
        <beans:constructor-arg><beans:value>/login.jsp</beans:value></beans:constructor-arg>
    </beans:bean>

    <beans:bean name="favoriteIcon"
                class="org.openinfinity.security.spring.catalina.AntPathValveRequestMatcher">
        <beans:constructor-arg><beans:value>/favicon.ico</beans:value></beans:constructor-arg>
    </beans:bean>

    <beans:bean name="oauthToken"
                class="org.openinfinity.security.spring.catalina.AntPathValveRequestMatcher">
        <beans:constructor-arg><beans:value>/oauth/token/**</beans:value></beans:constructor-arg>
    </beans:bean>

    <beans:bean name="webServices"
                class="org.openinfinity.security.spring.catalina.AntPathValveRequestMatcher">
        <beans:constructor-arg><beans:value>/services/**</beans:value></beans:constructor-arg>
    </beans:bean>

    <http request-matcher-ref="samlProcessing" security="none"/>
    <http request-matcher-ref="logout" security="none"/>
    <http request-matcher-ref="login" security="none"/>
    <http request-matcher-ref="favoriteIcon" security="none"/>
    <!-- Once in a TOAS setup: Auth Server token services need to skip SAML -->
    <!-- Access is controlled by the OAuthProcessing filter that checks auth code -->
    <http request-matcher-ref="oauthToken" security="none"/>
    <!-- Once per exposed web service in TOAS - as narrow match as possible -->
    <http request-matcher-ref="webServices" security="none"/>

    <http entry-point-ref="samlEntryPoint"
          security-context-repository-ref="securityContextRepository">
        <request-cache ref="hashMapBasedRequestCache"/>
        <intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY"/>
        <custom-filter before="PRE_AUTH_FILTER" ref="metadataFilter"/>
        <custom-filter position="PRE_AUTH_FILTER" ref="samlEntryPoint"/>
        <custom-filter after="BASIC_AUTH_FILTER" ref="samlProcessingFilter"/>
        <custom-filter after="LOGOUT_FILTER" ref="samlLogoutFilter"/>
        <custom-filter before="LOGOUT_FILTER" ref="samlLogoutProcessingFilter"/>
    </http>

    <authentication-manager alias="authenticationManager"
                            erase-credentials="false">
        <authentication-provider ref="jaasAuthenticationProvider"/>
    </authentication-manager>

    <beans:bean id="hashMapBasedRequestCache"
                class="org.openinfinity.sso.springsecurity.MapBasedRequestCache"/>

    <!-- SAML Authentication Provider responsible for validating of received
  SAML messages -->

    <beans:bean id="jaasAuthenticationProvider"
                class="org.openinfinity.sso.springsecurity.JAASBasedSAMLAuthenticationProvider">
        <beans:property name="loginConfig" value="${login.config.url}"/>
        <beans:property name="loginContextName" value="jossoForMule"/>
        <beans:property name="callbackHandlers">
            <beans:list>
                <beans:bean
                        class="org.openinfinity.sso.springsecurity.SAMLCredentialCallbackHandler"/>
            </beans:list>
        </beans:property>
        <beans:property name="authorityGranters">
            <beans:list>
                <beans:bean
                        class="${authority.granter.class}">
                    <beans:property name="patternString"
                                    value="${authority.granter.pattern}"/>
                </beans:bean>
            </beans:list>
        </beans:property>
    </beans:bean>

    <!-- Logger for SAML messages and events -->
    <beans:bean id="samlLogger"
                class="org.springframework.security.saml.log.SAMLDefaultLogger"/>
    <!-- SAML 2.0 Assertion Consumer -->
    <beans:bean id="webSSOprofileConsumer"
                class="org.springframework.security.saml.websso.WebSSOProfileConsumerImpl"/>
    <!-- IDP Metadata configuration - paths to metadata of IDPs in circle of
         trust is here -->
    <!-- Do not forget to call initialize method on providers -->
    <beans:bean id="metadata"
                class="org.springframework.security.saml.metadata.CachingMetadataManager">
        <beans:constructor-arg>
            <beans:list>
                <beans:bean
                        class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
                    <beans:constructor-arg>
                        <beans:bean
                                class="org.opensaml.saml2.metadata.provider.FilesystemMetadataProvider">
                            <beans:constructor-arg>
                                <beans:value
                                        type="java.io.File">
                                    ${idp.metadata.url}
                                </beans:value>
                            </beans:constructor-arg>
                            <beans:property name="parserPool"
                                            ref="parserPool"/>
                        </beans:bean>
                    </beans:constructor-arg>
                    <beans:constructor-arg>
                        <beans:bean
                                class="org.springframework.security.saml.metadata.ExtendedMetadata"/>
                    </beans:constructor-arg>
                </beans:bean>
                <beans:bean
                        class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
                    <beans:constructor-arg>
                        <beans:bean
                                class="org.opensaml.saml2.metadata.provider.FilesystemMetadataProvider">
                            <beans:constructor-arg>
                                <beans:value
                                        type="java.io.File">
                                    ${sp.metadata.url}
                                </beans:value>
                            </beans:constructor-arg>
                            <beans:property name="parserPool"
                                            ref="parserPool"/>
                        </beans:bean>
                    </beans:constructor-arg>
                    <beans:constructor-arg>
                        <beans:bean
                                class="org.springframework.security.saml.metadata.ExtendedMetadata"/>
                    </beans:constructor-arg>
                </beans:bean>
            </beans:list>
        </beans:constructor-arg>
        <beans:property name="hostedSPName"
                        value="${hosted.sp.name}"/>
        <beans:property name="defaultIDP"
                        value="${default.idp}"/>
    </beans:bean>
    <!-- XML parser pool needed for OpenSAML parsing -->
    <beans:bean id="parserPool"
                class="org.opensaml.xml.parse.BasicParserPool"
                scope="singleton"/>
    <!-- Central storage of cryptographic keys -->
    <beans:bean id="keyManager"
                class="org.springframework.security.saml.key.JKSKeyManager">
        <!-- TODO should this keystore be changed to one produced by JOSSO ? -->
        <beans:constructor-arg
                value="classpath:security/sp1Keystore.jks"/>
        <beans:constructor-arg type="java.lang.String" value="nalle123"/>
        <beans:constructor-arg>
            <beans:map>
                <beans:entry key="sp1" value="nalle123"/>
            </beans:map>
        </beans:constructor-arg>
        <beans:constructor-arg type="java.lang.String" value="sp1"/>
    </beans:bean>
    <!-- Class is capable of generating SP metadata describing the currently running environnment -->
    <beans:bean id="metadataGenerator"
                class="org.springframework.security.saml.metadata.MetadataGenerator"/>
    <!-- Provider of default SAML Context -->
    <beans:bean id="contextProvider"
                class="org.springframework.security.saml.context.SAMLContextProviderImpl"/>
    <!-- SAML 2.0 Web SSO profile -->
    <beans:bean id="webSSOprofile"
                class="org.springframework.security.saml.websso.WebSSOProfileImpl"/>
    <!-- SAML 2.0 ECP profile -->
    <beans:bean id="ecpprofile"
                class="org.springframework.security.saml.websso.WebSSOProfileECPImpl"/>
    <!-- SAML 2.0 Logout Profile -->
    <beans:bean id="logoutprofile"
                class="org.springframework.security.saml.websso.SingleLogoutProfileImpl"/>
    <!-- Bindings, encoders and decoders used for creating and parsing messages -->
    <beans:bean id="postBinding"
                class="org.springframework.security.saml.processor.HTTPPostBinding">
        <beans:constructor-arg ref="parserPool"/>
        <beans:constructor-arg ref="velocityEngine"/>
    </beans:bean>
    <beans:bean id="redirectBinding"
                class="org.springframework.security.saml.processor.HTTPRedirectDeflateBinding">
        <beans:constructor-arg ref="parserPool"/>
    </beans:bean>
    <beans:bean id="artifactBinding"
                class="org.springframework.security.saml.processor.HTTPArtifactBinding">
        <beans:constructor-arg ref="parserPool"/>
        <beans:constructor-arg ref="velocityEngine"/>
        <beans:constructor-arg>
            <beans:bean
                    class="org.springframework.security.saml.websso.ArtifactResolutionProfileImpl">
                <beans:constructor-arg>
                    <beans:bean
                            class="org.apache.commons.httpclient.HttpClient"/>
                </beans:constructor-arg>
                <beans:property name="processor">
                    <beans:bean id="soapProcessor"
                                class="org.springframework.security.saml.processor.SAMLProcessorImpl">
                        <beans:constructor-arg ref="soapBinding"/>
                    </beans:bean>
                </beans:property>
            </beans:bean>
        </beans:constructor-arg>
    </beans:bean>
    <beans:bean id="soapBinding"
                class="org.springframework.security.saml.processor.HTTPSOAP11Binding">
        <beans:constructor-arg ref="parserPool"/>
    </beans:bean>
    <beans:bean id="paosBinding"
                class="org.springframework.security.saml.processor.HTTPPAOS11Binding">
        <beans:constructor-arg ref="parserPool"/>
    </beans:bean>
    <!-- Initialization of OpenSAML library-->
    <beans:bean class="org.springframework.security.saml.SAMLBootstrap"/>
    <!-- Initialization of the velocity engine -->
    <beans:bean id="velocityEngine"
                class="org.springframework.security.saml.util.VelocityFactory"
                factory-method="getEngine"/>
    <!-- Class loading incoming SAML messages from httpRequest stream -->
    <beans:bean id="processor"
                class="org.springframework.security.saml.processor.SAMLProcessorImpl">
        <beans:constructor-arg>
            <beans:list>
                <beans:ref bean="redirectBinding"/>
                <beans:ref bean="postBinding"/>
                <beans:ref bean="artifactBinding"/>
                <beans:ref bean="soapBinding"/>
                <beans:ref bean="paosBinding"/>
            </beans:list>
        </beans:constructor-arg>
    </beans:bean>
    <!-- Handler deciding where to redirect user after successful login -->
    <beans:bean id="successRedirectHandler"
                class="org.openinfinity.security.spring.catalina.ValveInfoAddingAuthenticationSuccessHandler">
        <beans:property name="defaultTargetUrl" value="/"/>
        <beans:property name="requestCache" ref="hashMapBasedRequestCache"/>
    </beans:bean>
    <!-- Override default authentication processing filter with the one processing SAML messages -->
    <beans:bean id="samlProcessingFilter"
                class="${saml.processing.filter.class}">
        <beans:property name="authenticationManager"
                        ref="authenticationManager"/>
        <beans:property name="authenticationSuccessHandler"
                        ref="successRedirectHandler"/>
    </beans:bean>
    <!-- Filter processing incoming logout messages -->
    <!-- First argument determines URL user will be redirected to after successful global logout -->
    <beans:bean id="samlLogoutProcessingFilter"
                class="${saml.logout.processing.filter.class}">
        <beans:constructor-arg ref="successLogoutHandler"/>
        <beans:constructor-arg ref="logoutHandler"/>
    </beans:bean>
    <!-- Handler for successful logout -->
    <beans:bean id="successLogoutHandler"
                class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
        <beans:property name="defaultTargetUrl" value="/"/>
    </beans:bean>
    <!-- Logout handler terminating local session -->
    <beans:bean id="logoutHandler"
                class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
        <beans:property name="invalidateHttpSession" value="false"/>
    </beans:bean>

    <beans:bean id="securityContextRepository"
                class="org.openinfinity.sso.springsecurity.SecurityContextStoreBasedSecurityContextRepository"/>

    <!-- Override default logout processing filter with the one processing SAML messages -->
    <beans:bean id="samlLogoutFilter"
                class="${saml.logout.filter.class}">
        <beans:constructor-arg ref="successLogoutHandler"/>
        <beans:constructor-arg ref="logoutHandler"/>
        <beans:constructor-arg ref="logoutHandler"/>
    </beans:bean>
    <!-- OPTIONAL bean: The filter is waiting for connections on URL suffixed with filterSuffix and presents SP metatdata there -->
    <beans:bean id="metadataFilter"
                class="org.springframework.security.saml.metadata.MetadataDisplayFilter">
        <!-- <beans:property name="filterSuffix" value="/saml/metadata"/> -->
    </beans:bean>
    <!-- Entry point to initialize authentication, default values taken from properties file -->
    <beans:bean id="samlEntryPoint"
                class="${saml.entry.point.class}">
        <!-- <beans:property name="filterSuffix" value="/saml/login"/> -->
        <beans:property name="defaultProfileOptions">
            <beans:bean
                    class="org.springframework.security.saml.websso.WebSSOProfileOptions">
                <beans:property name="includeScoping" value="false"/>
            </beans:bean>
        </beans:property>
    </beans:bean>


    <!-- Hazelcast distributed memory 
	<hz:client id="instance" group-name="usageGroup" group-password="password">
            <hz:member>127.0.0.1:15701</hz:member>
    </hz:client>
    -->
    <beans:bean factory-bean="instance" factory-method="getMap" id="samlMessages">
            <beans:constructor-arg type="java.lang.String" value="samlMessages"></beans:constructor-arg>
    </beans:bean>
    
    <beans:bean factory-bean="instance" factory-method="getMap" id="securityContexts">
            <beans:constructor-arg type="java.lang.String" value="securityContexts"></beans:constructor-arg>
    </beans:bean>


    <hz:hazelcast id="instance">
        <hz:config>
            <hz:group name="toas" password="toas1234"/>
            <hz:properties>
                <hz:property name="hazelcast.merge.first.run.delay.seconds">5
                </hz:property>
                <hz:property name="hazelcast.merge.next.run.delay.seconds">5
                </hz:property>
            </hz:properties>
            <hz:network port="15701" port-auto-increment="true">
                <hz:join>
                    <hz:multicast enabled="true" multicast-group="<%= multicastaddress %>" multicast-port="54331"/>
                </hz:join>
            </hz:network>
            <hz:map name="samlMessages"
                    backup-count="2"
                    max-size="0"
                    eviction-percentage="30"
                    read-backup-data="true"
                    cache-value="true"
                    eviction-policy="NONE"
                    merge-policy="hz.ADD_NEW_ENTRY"/>
            <hz:map name="securityContexts"
                    backup-count="2"
                    max-size="0"
                    eviction-percentage="30"
                    read-backup-data="true"
                    cache-value="true"
                    eviction-policy="NONE"
                    merge-policy="hz.ADD_NEW_ENTRY"/>
        </hz:config>
    </hz:hazelcast>

</beans:beans>
